from fid import get_fidimport numpy as npfrom my_utils import *import osimport tensorflow.compat.v1 as tftf.disable_v2_behavior()# from fid import get_fidFLAGS, unparsed = flags()num_epochs = FLAGS.num_epochsbatch_size = FLAGS.batch_sizedataset = FLAGS.datasetlr = FLAGS.lrgpu_num = FLAGS.gpu_numlearntop = bool(FLAGS.learntop)remove_all = bool(FLAGS.remove_all)desc = FLAGS.descml_threshold = FLAGS.ml_thresholdinj_update_freq = FLAGS.inj_update_freqmodel_depth = FLAGS.model_depthlatent_depth = FLAGS.latent_depthFID = Trueall_experiments = 'experiment_results/'if os.path.exists(all_experiments) == False:    os.mkdir(all_experiments)exp_path = all_experiments + 'ICML_' + \    dataset + '_' + 'model_depth_%d' % (model_depth,) + '_' + 'latent_depth_%d'% (latent_depth,) + '_learntop_%d' \        % (int(learntop)) + '_' + descif os.path.exists(exp_path) == False:    os.mkdir(exp_path)gpus = tf.config.experimental.list_physical_devices('GPU')if gpus:    # Restrict TensorFlow to only use the first GPU    try:        tf.config.experimental.set_visible_devices(gpus[gpu_num], 'GPU')        tf.config.experimental.set_memory_growth(gpus[gpu_num], True)    except RuntimeError as e:        # Visible devices must be set before GPUs have been initialized        print(e)x_fid = np.load(os.path.join(exp_path, 'x_fid.npy'))x_orig_fid = np.load(os.path.join(exp_path, 'x_orig_fid.npy'))print('FID calculation starts...')fid_value = get_fid(x_fid , x_orig_fid)print('FID is:{}'.format(fid_value) )